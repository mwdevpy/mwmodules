# meta developer: @mwmodules
# meta desc: üìä ServerInfo - Detailed server statistics including CPU, RAM, disk usage, and system performance metrics
# by @mwmodules
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta link: .dlm http://mwmodules.ftp.sh/serverinfo.py



from .. import loader, utils
import platform
import psutil
import os
import sys
import distro
import socket
from datetime import datetime
from telethon.tl.types import Message

__version__ = (1, 1, 0)


"""
    ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñë‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ
    ‚ñà‚ñë‚ñÄ‚ñë‚ñà ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñë ‚ñà‚ñÄ‚ñë ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ
    
    Developer: @mwoffice
    
    Copyright (C) 2024
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
"""


@loader.tds
class ServerInfoMod(loader.Module):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""

    strings = {
        "name": "ServerInfo",
        "loading": "–ó–∞–≥—Ä—É–∑–∫–∞...",
        "error": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "_cmd_doc_serverinfo": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

    def get_markup(self):
        return [
            [
                {"text": "üîß CPU", "callback": self.cpu_callback},
                {"text": "üíæ RAM", "callback": self.ram_callback},
            ],
            [
                {"text": "üíΩ –î–∏—Å–∫", "callback": self.disk_callback},
                {"text": "üåê –°–µ—Ç—å", "callback": self.net_callback},
            ],
            [
                {"text": "üìä –ü—Ä–æ—Ü–µ—Å—Å—ã", "callback": self.proc_callback},
                {"text": "üîå Sensors", "callback": self.sens_callback},
            ],
            [
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.system_callback},
            ],
        ]

    def get_back_markup(self):
        return [
            [
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.system_callback},
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self.current_callback},
            ],
        ]

    async def system_callback(self, call):
        self.current_callback = self.system_callback
        info = "<b>üñ• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    
        try:
            info += f"<b>OS:</b> {platform.system() or self.strings['error']}\n"
        except:
            info += f"<b>OS:</b> {self.strings['error']}\n"
            
        try:    
            info += f"<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {platform.machine() or self.strings['error']}\n"
        except:
            info += f"<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {self.strings['error']}\n"
            
        try:
            info += f"<b>Python:</b> {sys.version.split()[0]}\n"
        except:
            info += f"<b>Python:</b> {self.strings['error']}\n"
            
        try:
            info += f"<b>Hostname:</b> {platform.node() or self.strings['error']}\n"
        except:
            info += f"<b>Hostname:</b> {self.strings['error']}\n"

        try:
            info += f"<b>–ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ:</b> {len(psutil.pids())}\n"
        except:
            info += f"<b>–ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ:</b> {self.strings['error']}\n"
            
        await call.edit(text=info, reply_markup=self.get_markup())

    async def cpu_callback(self, call):
        self.current_callback = self.cpu_callback
        info = "<b>üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</b>\n\n"
        
        try:
            info += f"<b>–ú–æ–¥–µ–ª—å:</b> {platform.processor() or self.strings['error']}\n"
        except:
            info += f"<b>–ú–æ–¥–µ–ª—å:</b> {self.strings['error']}\n"
            
        try:
            info += f"<b>–§–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞:</b> {psutil.cpu_count(logical=False)}\n"
            info += f"<b>–õ–æ–≥–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞:</b> {psutil.cpu_count()}\n"
        except:
            info += f"<b>–Ø–¥—Ä–∞:</b> {self.strings['error']}\n"
            
        try:
            info += f"<b>–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–∞—è:</b> {psutil.cpu_percent()}%\n"
        except:
            info += f"<b>–ó–∞–≥—Ä—É–∑–∫–∞:</b> {self.strings['error']}\n"

        await call.edit(text=info, reply_markup=self.get_back_markup())

    async def ram_callback(self, call):
        self.current_callback = self.ram_callback
        info = "<b>üíæ –ü–∞–º—è—Ç—å</b>\n\n"
        
        try:
            mem = psutil.virtual_memory()
            info += f"<b>RAM –≤—Å–µ–≥–æ:</b> {mem.total // (1024**2)}MB\n"
            info += f"<b>RAM –¥–æ—Å—Ç—É–ø–Ω–æ:</b> {mem.available // (1024**2)}MB\n"
            info += f"<b>RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {mem.used // (1024**2)}MB\n"
            info += f"<b>RAM –∑–∞–≥—Ä—É–∑–∫–∞:</b> {mem.percent}%\n"
        except:
            info += f"<b>RAM:</b> {self.strings['error']}\n"

        try:
            swap = psutil.swap_memory()
            info += f"\n<b>SWAP –≤—Å–µ–≥–æ:</b> {swap.total // (1024**2)}MB\n"
            info += f"<b>SWAP –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {swap.used // (1024**2)}MB\n"
            info += f"<b>SWAP –∑–∞–≥—Ä—É–∑–∫–∞:</b> {swap.percent}%\n"
        except:
            info += f"\n<b>SWAP:</b> {self.strings['error']}\n"
            
        await call.edit(text=info, reply_markup=self.get_back_markup())

    async def disk_callback(self, call):
        self.current_callback = self.disk_callback
        info = "<b>üíΩ –î–∏—Å–∫–∏</b>\n\n"
        
        try:
            partitions = psutil.disk_partitions()
            if partitions:
                for partition in partitions:
                    try:
                        usage = psutil.disk_usage(partition.mountpoint)
                        info += (
                            f"<b>–†–∞–∑–¥–µ–ª:</b> {partition.device}\n"
                            f"<b>–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {partition.mountpoint}\n"
                            f"<b>–í—Å–µ–≥–æ:</b> {usage.total // (1024**3)}GB\n"
                            f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {usage.used // (1024**3)}GB\n"
                            f"<b>–ó–∞–≥—Ä—É–∑–∫–∞:</b> {usage.percent}%\n\n"
                        )
                    except:
                        continue
            else:
                info += f"–†–∞–∑–¥–µ–ª—ã: {self.strings['error']}\n"
        except:
            info += f"–î–∏—Å–∫–∏: {self.strings['error']}\n"
            
        await call.edit(text=info, reply_markup=self.get_back_markup())

    async def net_callback(self, call):
        self.current_callback = self.net_callback
        info = "<b>üåê –°–µ—Ç—å</b>\n\n"
        
        try:
            net_io = psutil.net_io_counters()
            info += (
                f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {net_io.bytes_sent // (1024**2)}MB\n"
                f"<b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {net_io.bytes_recv // (1024**2)}MB\n\n"
            )
        except:
            info += f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {self.strings['error']}\n\n"
            
        try:
            for interface, addrs in psutil.net_if_addrs().items():
                info += f"<b>{interface}:</b>\n"
                for addr in addrs:
                    if addr.family == socket.AF_INET:
                        info += f"IPv4: {addr.address}\n"
                info += "\n"
        except:
            info += f"<b>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:</b> {self.strings['error']}\n"
                    
        await call.edit(text=info, reply_markup=self.get_back_markup())

    async def proc_callback(self, call):
        self.current_callback = self.proc_callback
        info = "<b>üìä –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ CPU</b>\n\n"
        
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent']):
                try:
                    processes.append(proc.info)
                except:
                    continue
                    
            top_cpu = sorted(processes, key=lambda x: x['cpu_percent'], reverse=True)[:5]
            
            for proc in top_cpu:
                info += (
                    f"<b>PID:</b> {proc['pid']}\n"
                    f"<b>–ò–º—è:</b> {proc['name']}\n"
                    f"<b>CPU:</b> {proc['cpu_percent']}%\n\n"
                )
        except:
            info += self.strings['error']
                
        await call.edit(text=info, reply_markup=self.get_back_markup())

    async def sens_callback(self, call):
        self.current_callback = self.sens_callback
        info = "<b>üîå –°–µ–Ω—Å–æ—Ä—ã</b>\n\n"
        sensors_available = False
        
        try:
            temps = psutil.sensors_temperatures()
            if temps:
                sensors_available = True
                info += "<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b>\n"
                for name, entries in temps.items():
                    for entry in entries:
                        info += f"<b>{name}:</b> {entry.current}¬∞C\n"
                info += "\n"
        except:
            pass
                
        try:
            battery = psutil.sensors_battery()
            if battery:
                sensors_available = True
                info += (
                    "<b>–ë–∞—Ç–∞—Ä–µ—è:</b>\n"
                    f"<b>–ó–∞—Ä—è–¥:</b> {battery.percent}%\n"
                    f"<b>–ü–∏—Ç–∞–Ω–∏–µ –æ—Ç —Å–µ—Ç–∏:</b> {'–î–∞' if battery.power_plugged else '–ù–µ—Ç'}\n"
                )
        except:
            pass
            
        if not sensors_available:
            info += self.strings['error']
            
        await call.edit(text=info, reply_markup=self.get_back_markup())

    @loader.command()
    async def serverinfo(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        info = "<b>üñ• –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
    
        try:
            info += f"<b>OS:</b> {platform.system() or self.strings['error']}\n"
        except:
            info += f"<b>OS:</b> {self.strings['error']}\n"
            
        try:    
            info += f"<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {platform.machine() or self.strings['error']}\n"
        except:
            info += f"<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> {self.strings['error']}\n"
            
        try:
            info += f"<b>Python:</b> {sys.version.split()[0]}\n"
        except:
            info += f"<b>Python:</b> {self.strings['error']}\n"
            
        try:
            info += f"<b>Hostname:</b> {platform.node() or self.strings['error']}\n"
        except:
            info += f"<b>Hostname:</b> {self.strings['error']}\n"

        try:
            info += f"<b>–ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ:</b> {len(psutil.pids())}\n"
        except:
            info += f"<b>–ü—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ:</b> {self.strings['error']}\n"
            
        await self.inline.form(
            text=info,
            message=message,
            reply_markup=self.get_markup(),
        )