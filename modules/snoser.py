# meta developer: @mwmodules 

import asyncio
import aiohttp
import logging
import re
import random
from telethon.tl.functions.messages import ReportSpamRequest, ReportRequest
from telethon.errors import ChatIdInvalidError, MessageIdInvalidError, PeerIdInvalidError
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class AutoReportMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±"""
    
    strings = {
        "name": "AutoReport",
        "token_required": "üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π .setreporttoken <—Ç–æ–∫–µ–Ω>\n–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: @mwapitokbot",
        "token_saved": "‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω\nü§ñ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –∑–∞–ø—É—â–µ–Ω–∞",
        "auto_started": "ü§ñ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –∑–∞–ø—É—â–µ–Ω–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 15 —Å–µ–∫)",
        "task_created": "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {}",
        "invalid_link": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "report_sent": "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {}\nüìù –ó–∞–¥–∞—á–∞: {}",
        "report_failed": "‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {}\nüìù –ó–∞–¥–∞—á–∞: {}",
        "api_success": "‚úÖ API: –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\nüÜî ID: {}",
        "api_failed": "‚ùå API: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\nüÜî ID: {}\nüìÑ –ü—Ä–∏—á–∏–Ω–∞: {}",
        "no_tasks": "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á",
        "blocked": "üö´ –¢–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "error": "‚ùå –û—à–∏–±–∫–∞: {}",
        "status": "üìä –°—Ç–∞—Ç—É—Å:\nü§ñ –ê–≤—Ç–æ: –í–∫–ª—é—á–µ–Ω\nüîë –¢–æ–∫–µ–Ω: {}\nüìà –í—Å–µ–≥–æ –∂–∞–ª–æ–±: {}\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {}\n‚ùå –û—à–∏–±–æ–∫: {}",
        "usage_snos": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n.snos <—Å—Å—ã–ª–∫–∞> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ\n.snos (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –æ—Ç–≤–µ—Ç—É",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_url",
                "http://noderu2.mwhost.store:2000",
                "URL API —Å–µ—Ä–≤–µ—Ä–∞",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "token",
                "",
                "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ API",
                validator=loader.validators.String()
            ),
        )
        self._auto_task = None
        self._stats = {"total": 0, "success": 0, "failed": 0}

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        if self.config["token"]:
            await self._start_auto()

    async def _make_request(self, method, endpoint, **kwargs):
        url = f"{self.config['api_url']}{endpoint}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(method, url, **kwargs) as resp:
                    if resp.status == 200:
                        return await resp.json()
                    elif resp.status == 403:
                        return {"error": "blocked"}
                    else:
                        error_text = await resp.text()
                        return {"error": f"HTTP {resp.status}: {error_text}"}
        except Exception as e:
            return {"error": str(e)}

    def _parse_telegram_link(self, link):
        """–ü–∞—Ä—Å–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram"""
        patterns = [
            r"https://t\.me/([a-zA-Z0-9_]+)/(\d+)",
            r"https://t\.me/c/(\d+)/(\d+)"
        ]
        
        for pattern in patterns:
            match = re.match(pattern, link.strip())
            if match:
                if pattern.startswith(r"https://t\.me/c/"):
                    chat_id = -int("100" + match.group(1))
                    message_id = int(match.group(2))
                else:
                    chat_id = match.group(1)
                    message_id = int(match.group(2))
                return chat_id, message_id
        return None, None

    async def _send_report(self, chat_id, message_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∞–ª–æ–±—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            chat = await self._client.get_entity(chat_id)
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º option –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
            result = await self._client(ReportRequest(
                peer=chat,
                id=[message_id],
                option=b'',  # –ü—É—Å—Ç–æ–π bytes –≤–º–µ—Å—Ç–æ reason
                message=""
            ))
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞
            if hasattr(result, 'options') and result.options:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                selected_option = random.choice(result.options)
                
                # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–µ–π
                await self._client(ReportRequest(
                    peer=chat,
                    id=[message_id],
                    option=selected_option.option,
                    message=""
                ))
            
            return True, "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        except ChatIdInvalidError:
            return False, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except MessageIdInvalidError:
            return False, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        except PeerIdInvalidError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    @loader.command()
    async def setreporttoken(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω API"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .setreporttoken <—Ç–æ–∫–µ–Ω>\n–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: @mwapitokbot")
            return
        
        self.config["token"] = args
        await utils.answer(message, self.strings["token_saved"])
        await self._start_auto()

    @loader.command()
    async def snos(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–Ω–æ—Å–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        if not self.config["token"]:
            await utils.answer(message, self.strings["token_required"])
            return

        args = utils.get_args_raw(message)
        link = None

        if message.is_reply and not args:
            reply = await message.get_reply_message()
            if reply.chat:
                if hasattr(reply.chat, 'username') and reply.chat.username:
                    link = f"https://t.me/{reply.chat.username}/{reply.id}"
                else:
                    chat_id = str(reply.chat.id)
                    if chat_id.startswith("-100"):
                        chat_id = chat_id[4:]
                    link = f"https://t.me/c/{chat_id}/{reply.id}"
        elif args:
            if args.startswith("https://t.me/"):
                link = args
            else:
                await utils.answer(message, self.strings["usage_snos"])
                return
        else:
            await utils.answer(message, self.strings["usage_snos"])
            return

        if not link:
            await utils.answer(message, self.strings["invalid_link"])
            return

        result = await self._make_request(
            "POST",
            f"/tasks/{self.config['token']}",
            json={"task_text": link}
        )

        if "error" in result:
            await utils.answer(message, self.strings["error"].format(result["error"]))
            return

        await utils.answer(message, self.strings["task_created"].format(result.get("task_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")))

    @loader.command()
    async def reportstats(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∞–ª–æ–±"""
        token_status = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if self.config["token"] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        await utils.answer(
            message,
            self.strings["status"].format(
                token_status,
                self._stats["total"],
                self._stats["success"],
                self._stats["failed"]
            )
        )

    async def _process_single_task(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        result = await self._make_request("GET", f"/tasks/{self.config['token']}")
        
        if "error" in result:
            if result["error"] == "blocked":
                await self._client.send_message("me", self.strings["blocked"])
                return
            return

        if "message" in result:
            return

        task_id = result["task_id"]
        task_url = result["task_text"]
        
        chat_id, message_id = self._parse_telegram_link(task_url)
        
        if not chat_id or not message_id:
            api_result = await self._make_request(
                "POST",
                f"/result/{self.config['token']}/{task_id}",
                json={"success": False, "error_message": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
            )
            self._stats["total"] += 1
            self._stats["failed"] += 1
            
            await self._client.send_message(
                "me", 
                self.strings["api_failed"].format(task_id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            )
            return

        success, error_msg = await self._send_report(chat_id, message_id)
        
        self._stats["total"] += 1
        
        if success:
            self._stats["success"] += 1
            api_result = await self._make_request(
                "POST",
                f"/result/{self.config['token']}/{task_id}",
                json={"success": True}
            )
            
            await self._client.send_message(
                "me",
                self.strings["report_sent"].format(error_msg, task_url)
            )
            
            if "error" not in api_result:
                await self._client.send_message(
                    "me",
                    self.strings["api_success"].format(task_id)
                )
        else:
            self._stats["failed"] += 1
            api_result = await self._make_request(
                "POST",
                f"/result/{self.config['token']}/{task_id}",
                json={"success": False, "error_message": error_msg}
            )
            
            await self._client.send_message(
                "me",
                self.strings["report_failed"].format(error_msg, task_url)
            )
            
            await self._client.send_message(
                "me",
                self.strings["api_failed"].format(task_id, error_msg)
            )

    async def _start_auto(self):
        if self._auto_task:
            return
        self._auto_task = asyncio.create_task(self._auto_worker())
        await self._client.send_message("me", self.strings["auto_started"])

    async def _stop_auto(self):
        if self._auto_task:
            self._auto_task.cancel()
            self._auto_task = None

    async def _auto_worker(self):
        while True:
            try:
                if not self.config["token"]:
                    await asyncio.sleep(15)
                    continue

                await self._process_single_task()
                await asyncio.sleep(15)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–≤–æ—Ä–∫–µ—Ä–µ: {e}")
                await asyncio.sleep(60)

    async def on_unload(self):
        if self._auto_task:
            self._auto_task.cancel()
