# meta developer: @mwmodules
# meta desc: SuperPing - –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞. –î–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.
# by @mwmodules
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta link: .dlm http://mwmodules.ftp.sh/superping.py

from .. import loader, utils
from telethon.tl.types import Message
import time, psutil, platform
from datetime import datetime
import io
import matplotlib.pyplot as plt
import asyncio

@loader.tds
class SuperPingMod(loader.Module):
    strings = {
        "name": "SuperPing",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "sys_stats": "üíª –°–∏—Å—Ç–µ–º–∞",
        "visual": "üìà –ì—Ä–∞—Ñ–∏–∫–∏",
    }

    async def get_ping(self):
        start = time.perf_counter()
        await self.client.get_me()
        return round((time.perf_counter() - start) * 1000, 2)

    async def get_main_buttons(self):
        ping = await self.get_ping()
        return [
            [{
                "text": f"üöÄ –ü–∏–Ω–≥: {ping} –º—Å",
                "callback": self.ping_callback
            }],
            [{
                "text": self.strings["sys_stats"],
                "callback": self.sys_stats_callback
            }],
            [{
                "text": self.strings["visual"],
                "callback": self.visual_callback
            }],
            [{
                "text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                "callback": self.refresh_callback
            }]
        ]

    async def ping_callback(self, call):
        ping = await self.get_ping()
        await call.answer(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {ping}–º—Å")

    async def create_stats_graph(self):
        plt.clf()
        cpu_history = []
        for _ in range(10):
            cpu_history.append(psutil.cpu_percent())
            await asyncio.sleep(0.5)
            
        plt.figure(figsize=(10, 5))
        plt.plot(cpu_history, 'b-', label='CPU %')
        plt.title('CPU Usage History')
        plt.xlabel('Time')
        plt.ylabel('Percentage')
        plt.grid(True)
        plt.legend()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        return buf

    async def sys_stats_callback(self, call):
        cpu = psutil.cpu_percent()
        ram = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        text = (
            "üíª –°–∏—Å—Ç–µ–º–∞:\n\n"
            f"üîß CPU: {cpu}%\n"
            f"üìä RAM: {ram.percent}%\n"
            f"üíæ –î–∏—Å–∫: {disk.percent}%\n"
            f"üêç Python: {platform.python_version()}\n"
            f"üñ• OS: {platform.system()} {platform.release()}\n\n"
            f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ CPU –ø–æ —è–¥—Ä–∞–º:\n"
            f"{' '.join([str(x) + '%' for x in psutil.cpu_percent(percpu=True)])}"
        )
        await call.edit(
            text=text,
            reply_markup=[[{
                "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                "callback": self.back_callback
            }]]
        )

    async def visual_callback(self, call):
        await call.edit("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞...")
        graph = await self.create_stats_graph()
        
        message = await self.client.send_file(
            call.from_user.id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            graph,
            caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CPU –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥"
        )
        
        await call.edit(
            text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await self.get_main_buttons()
        )

    async def back_callback(self, call):
        await call.edit(
            text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await self.get_main_buttons()
        )

    async def refresh_callback(self, call):
        await call.edit(
            text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await self.get_main_buttons()
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.command()
    async def sping(self, message: Message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–∏–Ω–≥"""
        await self.inline.form(
            text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            message=message,
            reply_markup=await self.get_main_buttons(),
        )