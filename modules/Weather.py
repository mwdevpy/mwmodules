# meta developer: @mwmodules
# meta desc: üå§ Weather - –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–µ—Ç–µ—Ä, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò–º–µ–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–∞—Ä—Ç—ã –æ—Å–∞–¥–∫–æ–≤.
# by @mwmodules
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta link: .dlm http://mwmodules.ftp.sh/weather.py


from .. import loader, utils
import aiohttp
import datetime
from telethon.tl.types import Message

@loader.tds
class WeatherMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞"""
    strings = {
        "name": "Weather",
        "city_not_found": "üèô –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "temp": "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        "feels": "üé≠ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫", 
        "wind": "üí® –í–µ—Ç–µ—Ä",
        "humidity": "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å",
        "pressure": "üéà –î–∞–≤–ª–µ–Ω–∏–µ",
        "clouds": "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å",
        "sunrise": "üåÖ –†–∞—Å—Å–≤–µ—Ç",
        "sunset": "üåá –ó–∞–∫–∞—Ç",
        "current": "üìç –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤",
        "forecast": "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞",
        "no_city": "üåç –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥",
        "map_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É"
    }

    def __init__(self):
        self.config = loader.ModuleConfig("token", "27f55366fdc2d2df4bdcdb6a2295251c", "API —Ç–æ–∫–µ–Ω –æ—Ç OpenWeatherMap")

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

    @loader.command()
    async def weathercmd(self, message):
        """<–≥–æ—Ä–æ–¥> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
        –ü—Ä–∏–º–µ—Ä—ã:
        .weather –ú–æ—Å–∫–≤–∞
        .weather Moscow 
        .weather New York"""
        if args := utils.get_args_raw(message):
            city = args
        else:
            return await utils.answer(message, self.strings["no_city"])

        weather = await self._get_weather(city)
        if not weather or weather.get("cod") != 200:
            return await utils.answer(message, self.strings["city_not_found"])

        forecast = await self._get_forecast(city)
        if not forecast:
            return await utils.answer(message, self.strings["city_not_found"])
        
        text = self._format_current(weather, city)
        text += "\n\n" + self._format_forecast(forecast)

        await self.inline.form(
            message=message,
            text=text,
            reply_markup=[
                [
                    {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self._update_weather, "args": (city,)},
                    {"text": "üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "data": f"weather_details_{city}"}
                ],
                [{"text": "üó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤", "data": f"weather_map_{city}"}]
            ]
        )

    async def _get_weather(self, city):
        url = "http://api.openweathermap.org/data/2.5/weather"
        params = {
            "q": city,
            "appid": self.config["token"],
            "units": "metric",
            "lang": "ru"
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                try:
                    return await response.json()
                except:
                    return None

    async def _get_forecast(self, city):
        url = "http://api.openweathermap.org/data/2.5/forecast"
        params = {
            "q": city,
            "appid": self.config["token"],
            "units": "metric",
            "lang": "ru"
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                try:
                    return await response.json()
                except:
                    return None

    def _format_current(self, data, city):
        return (
            f"{self.strings['current']} {city}:\n"
            f"{self.strings['temp']}: {round(data['main']['temp'])}¬∞C\n"
            f"{self.strings['feels']}: {round(data['main']['feels_like'])}¬∞C\n"
            f"{self.strings['wind']}: {data['wind']['speed']} –º/—Å\n"
            f"{self.strings['humidity']}: {data['main']['humidity']}%\n"
            f"{self.strings['pressure']}: {round(data['main']['pressure'] * 0.750062)} –º–º.—Ä—Ç.—Å—Ç\n"
            f"{self.strings['clouds']}: {data['clouds']['all']}%\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['weather'][0]['description']}"
        )

    def _format_forecast(self, data):
        if not data or 'list' not in data:
            return ""
            
        text = f"{self.strings['forecast']} 5 –¥–Ω–µ–π:\n\n"
        current_date = None
        for item in data['list']:
            date = datetime.datetime.fromtimestamp(item['dt'])
            if current_date != date.date():
                current_date = date.date()
                text += (
                    f"{date.strftime('%d.%m')}:\n"
                    f"üå° {round(item['main']['temp'])}¬∞C | "
                    f"üí® {item['wind']['speed']} –º/—Å | "
                    f"üíß {item['main']['humidity']}% | "
                    f"{item['weather'][0]['description']}\n\n"
                )
        return text

    async def _update_weather(self, call, city):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        weather = await self._get_weather(city)
        if not weather or weather.get("cod") != 200:
            return await call.answer(self.strings["city_not_found"], show_alert=True)
            
        forecast = await self._get_forecast(city)
        if not forecast:
            return await call.answer(self.strings["city_not_found"], show_alert=True)
        
        text = self._format_current(weather, city)
        text += "\n\n" + self._format_forecast(forecast)
        
        await call.edit(
            text=text,
            reply_markup=[
                [
                    {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback": self._update_weather, "args": (city,)},
                    {"text": "üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "data": f"weather_details_{city}"}
                ],
                [{"text": "üó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤", "data": f"weather_map_{city}"}]
            ]
        )

    @loader.callback_handler()
    async def weather_callback_handler(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        if call.data.startswith("weather_details_"):
            city = call.data.split("_")[2]
            weather = await self._get_weather(city)
            if not weather or weather.get("cod") != 200:
                return await call.answer(self.strings["city_not_found"], show_alert=True)
            
            text = (
                f"üìç –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ {city}:\n\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(weather['main']['temp'])}¬∞C\n"
                f"üé≠ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {round(weather['main']['feels_like'])}¬∞C\n"
                f"üå° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {round(weather['main']['temp_min'])}¬∞C\n"
                f"üå° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {round(weather['main']['temp_max'])}¬∞C\n"
                f"üí® –í–µ—Ç–µ—Ä: {weather['wind']['speed']} –º/—Å\n"
                f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {weather['wind']['deg']}¬∞\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['main']['humidity']}%\n"
                f"üéà –î–∞–≤–ª–µ–Ω–∏–µ: {round(weather['main']['pressure'] * 0.750062)} –º–º.—Ä—Ç.—Å—Ç\n"
                f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather['clouds']['all']}%\n"
                f"üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {round(weather.get('visibility', 0)/1000, 1)} –∫–º\n"
                f"üåÖ –†–∞—Å—Å–≤–µ—Ç: {datetime.datetime.fromtimestamp(weather['sys']['sunrise']).strftime('%H:%M')}\n"
                f"üåá –ó–∞–∫–∞—Ç: {datetime.datetime.fromtimestamp(weather['sys']['sunset']).strftime('%H:%M')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather['weather'][0]['description']}"
            )
            
            await call.edit(
                text=text,
                reply_markup=[[{"text": "¬´ –ù–∞–∑–∞–¥", "callback": self._update_weather, "args": (city,)}]]
            )
            
        elif call.data.startswith("weather_map_"):
            city = call.data.split("_")[2]
            weather = await self._get_weather(city)
            if not weather or weather.get("cod") != 200:
                return await call.answer(self.strings["city_not_found"], show_alert=True)
                
            lat = weather['coord']['lat']
            lon = weather['coord']['lon']
            
            map_url = f"https://tile.openweathermap.org/map/precipitation_new/10/{lat}/{lon}.png?appid={self.config['token']}"
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(map_url) as response:
                        if response.status == 200:
                            map_data = await response.read()
                            await self._client.send_file(
                                call.message.chat.id,
                                map_data,
                                caption=f"üó∫ –ö–∞—Ä—Ç–∞ –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è {city}"
                            )
                        else:
                            await call.answer(self.strings["map_error"], show_alert=True)
            except:
                await call.answer(self.strings["map_error"], show_alert=True)