# meta developer: @mwmodules
# meta desc: üåê TempMail - Disposable temporary email addresses generator for private and secure communication
# by @mwmodules
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta link: .dlm http://mwmodules.ftp.sh/tempmail.py


from .. import loader, utils
import aiohttp
import random
import string
import time
from telethon.tl.types import Message

__version__ = (1, 0, 0)

@loader.tds
class TempMailMod(loader.Module):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –æ—Ç @mwoffice"""
    strings = {
        "name": "TempMail",
        "_cmd_doc_tempmail": "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –æ—Ç @mwoffice",
        "no_email": "üö´ –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω",
        "email_created": "üì´ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —è—â–∏–∫: <code>{}</code>",
        "email_deleted": "üóë –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ —É–¥–∞–ª–µ–Ω",
        "no_messages": "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        "loading": "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...",
        "dev": """
üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @mwoffice

<b>üìù –û –º–æ–¥—É–ª–µ:</b>
‚îî –í–µ—Ä—Å–∏—è: <code>{}</code>
‚îî –õ–∏—Ü–µ–Ω–∑–∏—è: GNU GPL v3

<b>‚ö°Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚îî –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞
‚îî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π 
‚îî –ß—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º
‚îî –£–¥–∞–ª–µ–Ω–∏–µ —è—â–∏–∫–∞

<b>üì¢ –ö–∞–Ω–∞–ª:</b> @mwmodules"""
    }

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self.email = None
        self.messages = []
        
    def get_markup(self):
        """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
        return [
            [
                {"text": "üì´ –°–æ–∑–¥–∞—Ç—å —è—â–∏–∫", "callback": self.create_callback},
                {"text": "üóë –£–¥–∞–ª–∏—Ç—å —è—â–∏–∫", "callback": self.delete_callback},
            ],
            [
                {"text": "üì® –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É", "callback": self.check_callback},
                {"text": "üìù –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π", "callback": self.list_callback},
            ],
            [
                {"text": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "callback": self.info_callback},
                {"text": "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "callback": self.dev_callback},
            ],
        ]
        
    def get_back_markup(self):
        """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        return [
            [
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.tempmail_callback},
            ],
        ]

    async def create_email(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞"""
        async with aiohttp.ClientSession() as session:
            async with session.get('https://www.1secmail.com/api/v1/?action=genRandomMailbox') as response:
                if response.status == 200:
                    email = await response.json()
                    return email[0]
        return None

    async def get_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.email:
            return []
            
        login, domain = self.email.split('@')
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'https://www.1secmail.com/api/v1/?action=getMessages&login={login}&domain={domain}'
            ) as response:
                if response.status == 200:
                    return await response.json()
        return []

    async def get_message(self, message_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∏—Å—å–º–∞"""
        if not self.email:
            return None
            
        login, domain = self.email.split('@')
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'https://www.1secmail.com/api/v1/?action=readMessage&login={login}&domain={domain}&id={message_id}'
            ) as response:
                if response.status == 200:
                    return await response.json()
        return None

    async def tempmail_callback(self, call):
        """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = "üìß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π</b>\n\n"
        
        if self.email:
            text += f"üì´ –¢–µ–∫—É—â–∏–π —è—â–∏–∫: <code>{self.email}</code>"
        else:
            text += "üì≠ –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
        await call.edit(text=text, reply_markup=self.get_markup())

    async def create_callback(self, call):
        """–°–æ–∑–¥–∞–Ω–∏–µ —è—â–∏–∫–∞"""
        self.email = await self.create_email()
        text = self.strings['email_created'].format(self.email)
        await call.edit(text=text, reply_markup=self.get_back_markup())

    async def delete_callback(self, call):
        """–£–¥–∞–ª–µ–Ω–∏–µ —è—â–∏–∫–∞"""
        self.email = None
        self.messages = []
        await call.edit(text=self.strings['email_deleted'], reply_markup=self.get_back_markup())

    async def check_callback(self, call):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã"""
        if not self.email:
            await call.edit(text=self.strings['no_email'], reply_markup=self.get_back_markup())
            return

        await call.edit(text=self.strings['loading'])
        self.messages = await self.get_messages()
        
        text = f"üì´ –Ø—â–∏–∫: <code>{self.email}</code>\n\n"
        if self.messages:
            text += f"üì® –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.messages)}"
        else:
            text += "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
            
        await call.edit(text=text, reply_markup=self.get_back_markup())

    async def list_callback(self, call):
        """–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.email:
            await call.edit(text=self.strings['no_email'], reply_markup=self.get_back_markup())
            return

        await call.edit(text=self.strings['loading'])
        self.messages = await self.get_messages()
        
        if not self.messages:
            await call.edit(text=self.strings['no_messages'], reply_markup=self.get_back_markup())
            return
            
        text = f"üì´ –Ø—â–∏–∫: <code>{self.email}</code>\n\n"
        for msg in self.messages:
            text += f"üì© –û—Ç: {msg['from']}\n"
            text += f"üìã –¢–µ–º–∞: {msg['subject']}\n"
            text += f"üïê –î–∞—Ç–∞: {msg['date']}\n\n"
            
        markup = self.get_back_markup()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in self.messages:
            markup.insert(0, [
                {"text": f"üì© {msg['subject'][:30]}", "callback": self.read_callback, "args": (msg['id'],)}
            ])
            
        await call.edit(text=text, reply_markup=markup)

    async def read_callback(self, call, message_id):
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.email:
            await call.edit(text=self.strings['no_email'], reply_markup=self.get_back_markup())
            return

        await call.edit(text=self.strings['loading'])
        message = await self.get_message(message_id)
        
        if not message:
            await call.edit(text="üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=self.get_back_markup())
            return
            
        text = f"üì´ –Ø—â–∏–∫: <code>{self.email}</code>\n\n"
        text += f"üì© –û—Ç: {message['from']}\n"
        text += f"üìã –¢–µ–º–∞: {message['subject']}\n"
        text += f"üïê –î–∞—Ç–∞: {message['date']}\n\n"
        text += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message['textBody']}\n"
        
        await call.edit(text=text, reply_markup=self.get_back_markup())

    async def info_callback(self, call):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ"""
        text = """üìß <b>TempMail</b>

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π.

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚îî –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
‚îî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚îî –ß—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º
‚îî –£–¥–∞–ª–µ–Ω–∏–µ —è—â–∏–∫–∞

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
‚îî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π

<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @mwoffice"""
        await call.edit(text=text, reply_markup=self.get_back_markup())

    async def dev_callback(self, call):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"""
        version = f"{__version__[0]}.{__version__[1]}.{__version__[2]}"
        await call.edit(
            text=self.strings["dev"].format(version),
            reply_markup=self.get_back_markup()
        )

    @loader.command()
    async def tempmail(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π"""
        text = "üìß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π</b>\n\n"
        
        if self.email:
            text += f"üì´ –¢–µ–∫—É—â–∏–π —è—â–∏–∫: <code>{self.email}</code>"
        else:
            text += "üì≠ –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω"
            
        await self.inline.form(
            text=text,
            message=message,
            reply_markup=self.get_markup(),
        )