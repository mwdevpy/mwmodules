# meta developer: @mwmodules
# meta desc: üõ∞ StarLink - –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø—É—Ç–Ω–∏–∫–∞—Ö StarLink.
# by @mwmodules
# üîí Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

from .. import loader, utils
from telethon.tl.types import Message
import aiohttp
import io
import plotly.graph_objects as go
from skyfield.api import load, EarthSatellite
import numpy as np
from telegraph import Telegraph
import speedtest

@loader.tds
class StarlinkTrackerMod(loader.Module):
    strings = {
        "name": "StarlinkTracker",
        "all_sats": (
            "üõ∞Ô∏è <b>–°–ø—É—Ç–Ω–∏–∫–∏ Starlink ({count})</b>\n\n"
            "{positions}\n"
            "üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {telegraph_url}"
        ),
        "full_list": (
            "üõ∞Ô∏è <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ Starlink ({count})</b>\n\n"
            "{positions}"
        ),
        "one_sat": (
            "üõ∞Ô∏è <b>–°–ø—É—Ç–Ω–∏–∫ Starlink: {name}</b>\n\n"
            "üìç <b>–®–∏—Ä–æ—Ç–∞:</b> {latitude:.2f}¬∞\n"
            "üìç <b>–î–æ–ª–≥–æ—Ç–∞:</b> {longitude:.2f}¬∞\n"
            "üìè <b>–í—ã—Å–æ—Ç–∞:</b> {altitude:.1f} –∫–º"
        ),
        "near_sat": (
            "üõ∞Ô∏è <b>–ë–ª–∏–∂–∞–π—à–∏–π —Å–ø—É—Ç–Ω–∏–∫ –∫ {name}</b>\n\n"
            "üìõ <b>–ò–º—è:</b> {near_name}\n"
            "üìç <b>–®–∏—Ä–æ—Ç–∞:</b> {latitude:.2f}¬∞\n"
            "üìç <b>–î–æ–ª–≥–æ—Ç–∞:</b> {longitude:.2f}¬∞\n"
            "üìè <b>–í—ã—Å–æ—Ç–∞:</b> {altitude:.1f} –∫–º"
        ),
        "speed_result": (
            "üåê <b>–û—Ü–µ–Ω–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ Starlink</b>\n\n"
            "üì° <b>–ü–∏–Ω–≥:</b> {ping:.1f} –º—Å\n"
            "üì• <b>–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏:</b> {download:.2f} –ú–±–∏—Ç/—Å\n"
            "üì§ <b>–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏:</b> {upload:.2f} –ú–±–∏—Ç/—Å\n"
            "üìç <b>–ë–ª–∏–∂–∞–π—à–∏–π —Å–ø—É—Ç–Ω–∏–∫:</b> {sat_name} (–≤—ã—Å–æ—Ç–∞ {altitude:.1f} –∫–º)"
        ),
        "error": "‚ùå <b>–û—à–∏–±–∫–∞:</b> {}",
        "processing": "üîÑ <b>–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö Starlink...</b>",
        "speed_processing": "üîÑ <b>–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...</b>",
        "no_data": "üò¢ <b>–î–∞–Ω–Ω—ã–µ –æ —Å–ø—É—Ç–Ω–∏–∫–∞—Ö Starlink –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>",
        "not_found": "üò¢ <b>–°–ø—É—Ç–Ω–∏–∫ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>"
    }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.session = aiohttp.ClientSession()
        self.ts = load.timescale()
        self.telegraph = Telegraph()
        self.telegraph.create_account(short_name='StarlinkTracker')

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ Starlink –Ω–∞ –∫–∞—Ä—Ç–µ –ó–µ–º–ª–∏ [—á–∏—Å–ª–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤]. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ 5000 —Å–ø—É—Ç–Ω–∏–∫–æ–≤, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100. –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–∏–∂–∞–π—à–∏—Ö 5 —Å–ø—É—Ç–Ω–∏–∫–æ–≤, –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ Telegraph.")
    async def starlink(self, message: Message):
        args = utils.get_args_raw(message)
        try:
            limit = int(args) if args.isdigit() else 100
            limit = min(limit, 5000)
        except ValueError:
            limit = 100

        await utils.answer(message, self.strings["processing"])
        try:
            satellites = await self._get_starlink_tle()
            if not satellites:
                return await utils.answer(message, self.strings["no_data"])

            positions = []
            for name, line1, line2 in satellites[:limit]:
                sat = EarthSatellite(line1, line2, name, self.ts)
                t = self.ts.now()
                geocentric = sat.at(t)
                subpoint = geocentric.subpoint()
                positions.append({
                    "name": name,
                    "latitude": subpoint.latitude.degrees,
                    "longitude": subpoint.longitude.degrees,
                    "altitude": subpoint.elevation.km
                })

            text_positions_short = "\n".join(
                f"üìõ {pos['name']}: –®–∏—Ä–æ—Ç–∞ {pos['latitude']:.2f}¬∞, –î–æ–ª–≥–æ—Ç–∞ {pos['longitude']:.2f}¬∞, –í—ã—Å–æ—Ç–∞ {pos['altitude']:.1f} –∫–º"
                for pos in positions[:5]
            )
            text_positions_full = "\n".join(
                f"üìõ {pos['name']}: –®–∏—Ä–æ—Ç–∞ {pos['latitude']:.2f}¬∞, –î–æ–ª–≥–æ—Ç–∞ {pos['longitude']:.2f}¬∞, –í—ã—Å–æ—Ç–∞ {pos['altitude']:.1f} –∫–º"
                for pos in positions
            )

            map_img = await self._generate_map(positions)

            telegraph_url = ""
            if len(text_positions_full) > 4096:
                response = self.telegraph.create_page(
                    title=f"Starlink Satellites ({len(positions)})",
                    content=[{"tag": "p", "children": [text_positions_full.replace("\n", "<br>")]}]
                )
                telegraph_url = f"https://telegra.ph/{response['path']}"
            else:
                await self._client.send_message(
                    message.chat_id,
                    self.strings["full_list"].format(
                        count=len(positions),
                        positions=text_positions_full
                    )
                )

            await self._client.send_file(
                message.chat_id,
                map_img,
                caption=self.strings["all_sats"].format(
                    count=len(positions),
                    positions=text_positions_short,
                    telegraph_url=telegraph_url or "–≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
                )
            )
            await message.delete()

        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø—É—Ç–Ω–∏–∫–∞ Starlink –ø–æ –∏–º–µ–Ω–∏. –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞.")
    async def starlinkone(self, message: Message):
        name = utils.get_args_raw(message)
        if not name:
            return await utils.answer(message, self.strings["error"].format("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–ø—É—Ç–Ω–∏–∫–∞"))

        await utils.answer(message, self.strings["processing"])
        try:
            satellites = await self._get_starlink_tle()
            if not satellites:
                return await utils.answer(message, self.strings["no_data"])

            target_sat = None
            for sat_name, line1, line2 in satellites:
                if sat_name.lower() == name.lower():
                    target_sat = (sat_name, line1, line2)
                    break

            if not target_sat:
                return await utils.answer(message, self.strings["not_found"].format(name=name))

            sat = EarthSatellite(target_sat[1], target_sat[2], target_sat[0], self.ts)
            t = self.ts.now()
            geocentric = sat.at(t)
            subpoint = geocentric.subpoint()
            position = {
                "name": target_sat[0],
                "latitude": subpoint.latitude.degrees,
                "longitude": subpoint.longitude.degrees,
                "altitude": subpoint.elevation.km
            }

            map_img = await self._generate_map([position])

            await self._client.send_file(
                message.chat_id,
                map_img,
                caption=self.strings["one_sat"].format(
                    name=position["name"],
                    latitude=position["latitude"],
                    longitude=position["longitude"],
                    altitude=position["altitude"]
                )
            )
            await message.delete()

        except Exceptionbuster as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    @loader.command(ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π —Å–ø—É—Ç–Ω–∏–∫ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ –∏–º–µ–Ω–∏. –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É.")
    async def starlinknear(self, message: Message):
        name = utils.get_args_raw(message)
        if not name:
            return await utils.answer(message, self.strings["error"].format("–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–ø—É—Ç–Ω–∏–∫–∞"))

        await utils.answer(message, self.strings["processing"])
        try:
            satellites = await self._get_starlink_tle()
            if not satellites:
                return await utils.answer(message, self.strings["no_data"])

            target_sat = None
            for sat_name, line1, line2 in satellites:
                if sat_name.lower() == name.lower():
                    target_sat = (sat_name, line1, line2)
                    break

            if not target_sat:
                return await utils.answer(message, self.strings["not_found"].format(name=name))

            target = EarthSatellite(target_sat[1], target_sat[2], target_sat[0], self.ts)
            t = self.ts.now()
            target_geo = target.at(t)
            target_sub = target_geo.subpoint()
            target_lat = target_sub.latitude.degrees
            target_lon = target_sub.longitude.degrees

            min_distance = float("inf")
            nearest_sat = None
            nearest_pos = None

            for name, line1, line2 in satellites:
                if name == target_sat[0]:
                    continue
                sat = EarthSatellite(line1, line2, name, self.ts)
                geo = sat.at(t)
                sub = geo.subpoint()
                lat = sub.latitude.degrees
                lon = sub.longitude.degrees
                distance = np.sqrt((target_lat - lat)**2 + (target_lon - lon)**2)
                if distance < min_distance:
                    min_distance = distance
                    nearest_sat = name
                    nearest_pos = {
                        "name": name,
                        "latitude": lat,
                        "longitude": lon,
                        "altitude": sub.elevation.km
                    }

            if not nearest_pos:
                return await utils.answer(message, self.strings["not_found"].format(name="–±–ª–∏–∂–∞–π—à–∏–π —Å–ø—É—Ç–Ω–∏–∫"))

            map_img = await self._generate_map([nearest_pos])

            await self._client.send_file(
                message.chat_id,
                map_img,
                caption=self.strings["near_sat"].format(
                    name=target_sat[0],
                    near_name=nearest_pos["name"],
                    latitude=nearest_pos["latitude"],
                    longitude=nearest_pos["longitude"],
                    altitude=nearest_pos["altitude"]
                )
            )
            await message.delete()

        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    @loader.command(ru_doc="–û—Ü–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞ Starlink, –∫–∞–∫ –µ—Å–ª–∏ –±—ã Starlink –±—ã–ª –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º. –í—ã–≤–æ–¥–∏—Ç –ø–∏–Ω–≥, —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–¥–∞—á–∏.")
    async def starlinkspeed(self, message: Message):
        await utils.answer(message, self.strings["speed_processing"])
        try:
            satellites = await self._get_starlink_tle()
            if not satellites:
                return await utils.answer(message, self.strings["no_data"])

            st = speedtest.Speedtest()
            st.get_best_server()
            ping = st.results.ping
            download = st.download() / 1_000_000
            upload = st.upload() / 1_000_000

            positions = []
            for name, line1, line2 in satellites:
                sat = EarthSatellite(line1, line2, name, self.ts)
                t = self.ts.now()
                geocentric = sat.at(t)
                subpoint = geocentric.subpoint()
                positions.append({
                    "name": name,
                    "latitude": subpoint.latitude.degrees,
                    "longitude": subpoint.longitude.degrees,
                    "altitude": subpoint.elevation.km
                })

            nearest_sat = min(positions, key=lambda x: np.sqrt(x["altitude"]**2))
            sat_altitude = nearest_sat["altitude"]
            sat_name = nearest_sat["name"]

            light_speed = 299792
            sat_ping = (2 * sat_altitude / light_speed) * 1000
            base_starlink_ping = 30
            estimated_ping = sat_ping + base_starlink_ping

            starlink_download = min(download, 100)
            starlink_upload = min(upload, 15)

            await utils.answer(
                message,
                self.strings["speed_result"].format(
                    ping=estimated_ping,
                    download=starlink_download,
                    upload=starlink_upload,
                    sat_name=sat_name,
                    altitude=sat_altitude
                )
            )

        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))

    async def _get_starlink_tle(self):
        url = "https://celestrak.org/NORAD/elements/gp.php?GROUP=starlink&FORMAT=tle"
        async with self.session.get(url) as resp:
            lines = (await resp.text()).strip().splitlines()
            satellites = []
            for i in range(0, len(lines), 3):
                if i + 2 < len(lines):
                    name = lines[i].strip()
                    line1 = lines[i + 1].strip()
                    line2 = lines[i + 2].strip()
                    satellites.append((name, line1, line2))
            return satellites

    async def _generate_map(self, positions):
        fig = go.Figure()

        fig.add_trace(
            go.Scattergeo(
                lon=[pos["longitude"] for pos in positions],
                lat=[pos["latitude"] for pos in positions],
                text=[pos["name"] for pos in positions],
                mode="markers+text",
                marker=dict(size=8, color="red", symbol="circle"),
                textfont=dict(size=8, color="black"),
                textposition="top center",
                name="Satellites"
            )
        )

        countries = [
            ("–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω", 65, 33),
            ("–ê–ª–±–∞–Ω–∏—è", 20, 41),
            ("–ê–ª–∂–∏—Ä", 3, 28),
            ("–ê–Ω–¥–æ—Ä—Ä–∞", 1.5, 42.5),
            ("–ê–Ω–≥–æ–ª–∞", 17, -12),
            ("–ê–Ω—Ç–∏–≥—É–∞ –∏ –ë–∞—Ä–±—É–¥–∞", -61.8, 17),
            ("–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞", -65, -35),
            ("–ê—Ä–º–µ–Ω–∏—è", 45, 40),
            ("–ê–≤—Å—Ç—Ä–∞–ª–∏—è", 135, -25),
            ("–ê–≤—Å—Ç—Ä–∏—è", 13, 47),
            ("–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω", 47, 40),
            ("–ë–∞–≥–∞–º—ã", -77, 24),
            ("–ë–∞—Ö—Ä–µ–π–Ω", 50.5, 26),
            ("–ë–∞–Ω–≥–ª–∞–¥–µ—à", 90, 24),
            ("–ë–∞—Ä–±–∞–¥–æ—Å", -59.5, 13),
            ("–ë–µ–ª–∞—Ä—É—Å—å", 28, 53),
            ("–ë–µ–ª—å–≥–∏—è", 4, 50.5),
            ("–ë–µ–ª–∏–∑", -88.5, 17.5),
            ("–ë–µ–Ω–∏–Ω", 2.5, 9.5),
            ("–ë—É—Ç–∞–Ω", 90.5, 27.5),
            ("–ë–æ–ª–∏–≤–∏—è", -65, -17),
            ("–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞", 18, 44),
            ("–ë–æ—Ç—Å–≤–∞–Ω–∞", 24, -22),
            ("–ë—Ä–∞–∑–∏–ª–∏—è", -50, -10),
            ("–ë—Ä—É–Ω–µ–π", 114.5, 4.5),
            ("–ë–æ–ª–≥–∞—Ä–∏—è", 25, 43),
            ("–ë—É—Ä–∫–∏–Ω–∞-–§–∞—Å–æ", -2, 12),
            ("–ë—É—Ä—É–Ω–¥–∏", 30, -3.5),
            ("–ö–∞–±–æ-–í–µ—Ä–¥–µ", -24, 16),
            ("–ö–∞–º–±–æ–¥–∂–∞", 105, 13),
            ("–ö–∞–º–µ—Ä—É–Ω", 12, 6),
            ("–ö–∞–Ω–∞–¥–∞", -100, 60),
            ("–¶–ê–†", 21, 7),
            ("–ß–∞–¥", 19, 15),
            ("–ß–∏–ª–∏", -70, -30),
            ("–ö–∏—Ç–∞–π", 100, 35),
            ("–ö–æ–ª—É–º–±–∏—è", -74, 4),
            ("–ö–æ–º–æ—Ä—ã", 44, -12),
            ("–ö–æ–Ω–≥–æ (–î–†–ö)", 25, 0),
            ("–ö–æ–Ω–≥–æ (–†–µ—Å–ø—É–±–ª–∏–∫–∞)", 15, -1),
            ("–ö–æ—Å—Ç–∞-–†–∏–∫–∞", -84, 10),
            ("–•–æ—Ä–≤–∞—Ç–∏—è", 16, 45),
            ("–ö—É–±–∞", -80, 22),
            ("–ö–∏–ø—Ä", 33, 35),
            ("–ß–µ—Ö–∏—è", 15, 50),
            ("–î–∞–Ω–∏—è", 10, 56),
            ("–î–∂–∏–±—É—Ç–∏", 43, 11),
            ("–î–æ–º–∏–Ω–∏–∫–∞", -61.3, 15.5),
            ("–î–æ–º–∏–Ω–∏–∫–∞–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞", -70, 19),
            ("–≠–∫–≤–∞–¥–æ—Ä", -78, -2),
            ("–ï–≥–∏–ø–µ—Ç", 30, 26),
            ("–°–∞–ª—å–≤–∞–¥–æ—Ä", -89, 13.5),
            ("–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ì–≤–∏–Ω–µ—è", 10, 1),
            ("–≠—Ä–∏—Ç—Ä–µ—è", 39, 15),
            ("–≠—Å—Ç–æ–Ω–∏—è", 26, 58),
            ("–≠—Å–≤–∞—Ç–∏–Ω–∏", 31.5, -26.5),
            ("–≠—Ñ–∏–æ–ø–∏—è", 40, 9),
            ("–§–∏–¥–∂–∏", 178, -18),
            ("–§–∏–Ω–ª—è–Ω–¥–∏—è", 25, 64),
            ("–§—Ä–∞–Ω—Ü–∏—è", 0, 46),
            ("–ì–∞–±–æ–Ω", 11.5, -1),
            ("–ì–∞–º–±–∏—è", -16.5, 13.5),
            ("–ì—Ä—É–∑–∏—è", 43.5, 42),
            ("–ì–µ—Ä–º–∞–Ω–∏—è", 10, 50),
            ("–ì–∞–Ω–∞", -1, 8),
            ("–ì—Ä–µ—Ü–∏—è", 22, 39),
            ("–ì—Ä–µ–Ω–∞–¥–∞", -61.7, 12),
            ("–ì–≤–∞—Ç–µ–º–∞–ª–∞", -90.5, 15.5),
            ("–ì–≤–∏–Ω–µ—è", -11, 10),
            ("–ì–≤–∏–Ω–µ—è-–ë–∏—Å–∞—É", -15, 12),
            ("–ì–∞–π–∞–Ω–∞", -59, 5),
            ("–ì–∞–∏—Ç–∏", -72.5, 19),
            ("–ì–æ–Ω–¥—É—Ä–∞—Å", -87.5, 15),
            ("–í–µ–Ω–≥—Ä–∏—è", 19, 47),
            ("–ò—Å–ª–∞–Ω–¥–∏—è", -18, 64),
            ("–ò–Ω–¥–∏—è", 80, 20),
            ("–ò–Ω–¥–æ–Ω–µ–∑–∏—è", 120, -5),
            ("–ò—Ä–∞–Ω", 53, 32),
            ("–ò—Ä–∞–∫", 44, 33),
            ("–ò—Ä–ª–∞–Ω–¥–∏—è", -8, 53),
            ("–ò–∑—Ä–∞–∏–ª—å", 34.5, 31.5),
            ("–ò—Ç–∞–ª–∏—è", 12, 42),
            ("–Ø–º–∞–π–∫–∞", -77.5, 18),
            ("–Ø–ø–æ–Ω–∏—è", 140, 35),
            ("–ò–æ—Ä–¥–∞–Ω–∏—è", 36, 31),
            ("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", 68, 48),
            ("–ö–µ–Ω–∏—è", 37, -1),
            ("–ö–∏—Ä–∏–±–∞—Ç–∏", 172.5, 1.5),
            ("–ö—É–≤–µ–π—Ç", 47.5, 29.5),
            ("–ö–∏—Ä–≥–∏–∑–∏—è", 75, 41),
            ("–õ–∞–æ—Å", 103, 18),
            ("–õ–∞—Ç–≤–∏—è", 24, 57),
            ("–õ–∏–≤–∞–Ω", 35.5, 33.5),
            ("–õ–µ—Å–æ—Ç–æ", 28, -29.5),
            ("–õ–∏–±–µ—Ä–∏—è", -9.5, 6.5),
            ("–õ–∏–≤–∏—è", 17, 27),
            ("–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω", 9.5, 47),
            ("–õ–∏—Ç–≤–∞", 24, 55),
            ("–õ—é–∫—Å–µ–º–±—É—Ä–≥", 6, 49.5),
            ("–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä", 47, -20),
            ("–ú–∞–ª–∞–≤–∏", 34, -13.5),
            ("–ú–∞–ª–∞–π–∑–∏—è", 112, 3),
            ("–ú–∞–ª—å–¥–∏–≤—ã", 73, 3.5),
            ("–ú–∞–ª–∏", -4, 17),
            ("–ú–∞–ª—å—Ç–∞", 14.5, 35.9),
            ("–ú–∞—Ä—à–∞–ª–ª–æ–≤—ã –û—Å—Ç—Ä–æ–≤–∞", 171, 7),
            ("–ú–∞–≤—Ä–∏—Ç–∞–Ω–∏—è", -12, 20),
            ("–ú–∞–≤—Ä–∏–∫–∏–π", 57.5, -20),
            ("–ú–µ–∫—Å–∏–∫–∞", -100, 25),
            ("–ú–∏–∫—Ä–æ–Ω–µ–∑–∏—è", 158, 6.5),
            ("–ú–æ–ª–¥–æ–≤–∞", 29, 47),
            ("–ú–æ–Ω–∞–∫–æ", 7.4, 43.7),
            ("–ú–æ–Ω–≥–æ–ª–∏—è", 105, 46),
            ("–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è", 19, 42),
            ("–ú–∞—Ä–æ–∫–∫–æ", -6, 32),
            ("–ú–æ–∑–∞–º–±–∏–∫", 35, -18.5),
            ("–ú—å—è–Ω–º–∞", 96, 21),
            ("–ù–∞–º–∏–±–∏—è", 17, -22),
            ("–ù–∞—É—Ä—É", 166.9, -0.5),
            ("–ù–µ–ø–∞–ª", 84, 28),
            ("–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", 5.5, 52),
            ("–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è", 175, -40),
            ("–ù–∏–∫–∞—Ä–∞–≥—É–∞", -85.5, 13),
            ("–ù–∏–≥–µ—Ä", 8, 16),
            ("–ù–∏–≥–µ—Ä–∏—è", 8, 10),
            ("–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–µ—è", 126, 40),
            ("–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è", 21.5, 41.5),
            ("–ù–æ—Ä–≤–µ–≥–∏—è", 10, 60),
            ("–û–º–∞–Ω", 56, 21),
            ("–ü–∞–∫–∏—Å—Ç–∞–Ω", 70, 30),
            ("–ü–∞–ª–∞—É", 134.5, 7.5),
            ("–ü–∞–Ω–∞–º–∞", -80, 9),
            ("–ü–∞–ø—É–∞ ‚Äî –ù–æ–≤–∞—è –ì–≤–∏–Ω–µ—è", 147, -6),
            ("–ü–∞—Ä–∞–≥–≤–∞–π", -58, -23),
            ("–ü–µ—Ä—É", -75, -10),
            ("–§–∏–ª–∏–ø–ø–∏–Ω—ã", 122, 14),
            ("–ü–æ–ª—å—à–∞", 20, 52),
            ("–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è", -8, 39.5),
            ("–ö–∞—Ç–∞—Ä", 51.5, 25.5),
            ("–†—É–º—ã–Ω–∏—è", 25, 46),
            ("–†–æ—Å—Å–∏—è", 100, 60),
            ("–†—É–∞–Ω–¥–∞", 30, -2),
            ("–°–µ–Ω—Ç-–ö–∏—Ç—Å –∏ –ù–µ–≤–∏—Å", -62.7, 17.3),
            ("–°–µ–Ω—Ç-–õ—é—Å–∏—è", -61, 13.8),
            ("–°–µ–Ω—Ç-–í–∏–Ω—Å–µ–Ω—Ç –∏ –ì—Ä–µ–Ω–∞–¥–∏–Ω—ã", -61.2, 13.2),
            ("–°–∞–º–æ–∞", -172, -13.5),
            ("–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ", 12.4, 43.9),
            ("–°–∞–Ω-–¢–æ–º–µ –∏ –ü—Ä–∏–Ω—Å–∏–ø–∏", 7, 1),
            ("–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è", 45, 24),
            ("–°–µ–Ω–µ–≥–∞–ª", -14.5, 14.5),
            ("–°–µ—Ä–±–∏—è", 20.5, 44),
            ("–°–µ–π—à–µ–ª—ã", 55.5, -4.5),
            ("–°—å–µ—Ä—Ä–∞-–õ–µ–æ–Ω–µ", -11.5, 8.5),
            ("–°–∏–Ω–≥–∞–ø—É—Ä", 103.8, 1.3),
            ("–°–ª–æ–≤–∞–∫–∏—è", 19.5, 48.5),
            ("–°–ª–æ–≤–µ–Ω–∏—è", 15, 46),
            ("–°–æ–ª–æ–º–æ–Ω–æ–≤—ã –û—Å—Ç—Ä–æ–≤–∞", 160, -9),
            ("–°–æ–º–∞–ª–∏", 49, 5),
            ("–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞", 25, -30),
            ("–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", 127, 36),
            ("–Æ–∂–Ω—ã–π –°—É–¥–∞–Ω", 31, 7),
            ("–ò—Å–ø–∞–Ω–∏—è", -4, 40),
            ("–®—Ä–∏-–õ–∞–Ω–∫–∞", 81, 7),
            ("–°—É–¥–∞–Ω", 30, 15),
            ("–°—É—Ä–∏–Ω–∞–º", -56, 4),
            ("–®–≤–µ—Ü–∏—è", 15, 64),
            ("–®–≤–µ–π—Ü–∞—Ä–∏—è", 8, 47),
            ("–°–∏—Ä–∏—è", 38, 35),
            ("–¢–∞–π–≤–∞–Ω—å", 121, 23.5),
            ("–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", 71, 39),
            ("–¢–∞–Ω–∑–∞–Ω–∏—è", 35, -6),
            ("–¢–∞–∏–ª–∞–Ω–¥", 100, 15),
            ("–í–æ—Å—Ç–æ—á–Ω—ã–π –¢–∏–º–æ—Ä", 125.5, -8.5),
            ("–¢–æ–≥–æ", 1.2, 8),
            ("–¢–æ–Ω–≥–∞", -175, -20),
            ("–¢—Ä–∏–Ω–∏–¥–∞–¥ –∏ –¢–æ–±–∞–≥–æ", -61.5, 10.5),
            ("–¢—É–Ω–∏—Å", 9, 34),
            ("–¢—É—Ä—Ü–∏—è", 35, 39),
            ("–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω", 60, 38),
            ("–¢—É–≤–∞–ª—É", 179, -8),
            ("–£–≥–∞–Ω–¥–∞", 32, 1),
            ("–£–∫—Ä–∞–∏–Ω–∞", 30, 50),
            ("–û–ê–≠", 54, 24),
            ("–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", -2, 54),
            ("–°–®–ê", -100, 40),
            ("–£—Ä—É–≥–≤–∞–π", -56, -33),
            ("–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", 64, 41),
            ("–í–∞–Ω—É–∞—Ç—É", 167, -15),
            ("–í–∞—Ç–∏–∫–∞–Ω", 12.45, 41.9),
            ("–í–µ–Ω–µ—Å—É—ç–ª–∞", -66, 8),
            ("–í—å–µ—Ç–Ω–∞–º", 108, 16),
            ("–ô–µ–º–µ–Ω", 48, 15),
            ("–ó–∞–º–±–∏—è", 28, -15),
            ("–ó–∏–º–±–∞–±–≤–µ", 30, -20)
        ]

        if len(positions) <= 50:
            for name, lon, lat in countries:
                fig.add_trace(
                    go.Scattergeo(
                        lon=[lon],
                        lat=[lat],
                        text=[name],
                        mode="text",
                        textfont=dict(size=6, color="black"),
                        showlegend=False
                    )
                )

        fig.update_layout(
            title_text=f"–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ Starlink ({len(positions)})",
            showlegend=True,
            geo=dict(
                scope="world",
                projection_type="natural earth",
                showland=True,
                landcolor="lightgreen",
                showcountries=True,
                countrycolor="black",
                showocean=True,
                oceancolor="lightblue"
            ),
            margin=dict(l=10, r=10, t=40, b=10),
            width=1200,
            height=600
        )

        buf = io.BytesIO()
        fig.write_image(buf, format="png", engine="kaleido")
        buf.seek(0)
        return buf

    async def unload(self):
        if self.session:
            await self.session.close()